commonfields:
  id: b73ae0bc-71fc-4f57-8230-c98050d78ef5
  version: 36
vcShouldKeepItemLegacyProdMachine: false
name: CreateDSPMRiskSlackBlocks
script: |
  register_module_line('CreateDSPMRiskSlackBlocks', 'start', __line__())
  ### pack version: 3.4.14

  def create_slack_block(incident, rule_names_list):
      rule_name = incident.get('ruleName')

      # Slack block structure
      block = {
          "blocks": [
              {
                  "type": "header",
                  "text": {
                      "type": "plain_text",
                      "text": "THE FOLLOWING RISK HAS BEEN DETECTED BY THE DSPM :warning:",
                      "emoji": True
                  }
              },
              {
                  "type": "section",
                  "block_id": "section_incident_details",
                  "text": {
                      "type": "mrkdwn",
                      "text": f"*XSOAR Incident ID:* {incident.get('incidentId')}\n"
                              f"*DSPM Risk ID:* {incident.get('riskFindingId')}\n"
                              f"*Rule Name:* {incident.get('ruleName')}\n"
                              f"*Severity:* {incident.get('severity')}\n"
                              f"*Asset Name:* {incident.get('assetName')}\n"
                              f"*Asset ID:* {incident.get('assetId')}\n"
                              f"*Project ID:* {incident.get('projectId')}\n"
                              f"*Cloud Provider:* {incident.get('cloudProvider')}\n"
                              f"*serviceType:* {incident.get('serviceType')}\n"
                              f"*First Discovered:* {incident.get('firstDetectedOn')}\n"
                              f"*Remediate Instruction:* {incident.get('remediateInstruction')}\n"
                  }
              },
              {
                  "type": "divider"
              },
              {
                  "type": "actions",
                  "elements": [
                      {
                          "type": "radio_buttons",
                          "options": [
                              {
                                  "text": {
                                      "type": "plain_text",
                                      "text": "Create a Jira ticket",
                                      "emoji": True
                                  },
                                  "value": "Create a Jira ticket"
                              }
                          ],
                          "action_id": "actionId-0"
                      }
                  ]
              },
              {
                  "type": "input",
                  "element": {
                      "type": "plain_text_input",
                      "placeholder": {
                          "type": "plain_text",
                          "text": "Please enter valide Project Name",
                          "emoji": True
                      },
                      "action_id": "project_name"
                  },
                  "label": {
                      "type": "plain_text",
                      "text": "Enter Project Name",
                      "emoji": True
                  }
              },
              {
                  "type": "input",
                  "element": {
                      "type": "plain_text_input",
                      "placeholder": {
                          "type": "plain_text",
                          "text": "Please enter valide Issue type",
                          "emoji": True
                      },
                      "action_id": "Issue_type"
                  },
                  "label": {
                      "type": "plain_text",
                      "text": "Enter Issue Type",
                      "emoji": True
                  }
              },
              {
                  "type": "divider"
              }
          ]
      }

      # Log the block structure to verify correctness
      print(f"Block structure before modification: {json.dumps(block, indent=2)}")

      # Add the "Remediate a Risk" radio button option if ruleName exists in rule_names_list
      if rule_name in rule_names_list:
          try:
              # Ensure the 'actions' block exists at the correct index
              block['blocks'][3]['elements'][0]['options'].insert(0, {
                  "text": {
                      "type": "plain_text",
                      "text": "Remediate a Risk",
                      "emoji": True
                  },
                  "value": "Remediate a Risk"
              })
          except IndexError as e:
              demisto.error(f"Error inserting 'Remediate a Risk' option: {str(e)}")
              raise

      return block


  ''' MAIN FUNCTION '''


  def main():  # pragma: no cover
      rule_names_list = [
          "Sensitive asset open to world",
          "Empty storage asset"
      ]
      try:
          incident = demisto.args().get("dspm_incident")

          block = create_slack_block(incident, rule_names_list)
          demisto.results(block)

          list_name = f"slack block of Incident ID : {incident['incidentId']}"
          print("list name: ", list_name)
          demisto.executeCommand('createList', {'listName': list_name, 'listData': block})

          return_results(
              CommandResults(
                  outputs_prefix="block_list_name",
                  outputs=list_name,
              )
          )

      except Exception as excep:
          demisto.error(traceback.format_exc())  # print the traceback
          demisto.setContext("OnError.Message", f"Error while creating DSPM risk slack block for {incident['incidentId']}: {str(excep)}")
          return_error(f'Failed to execute CreateDSPMRiskSlackBlocks. Error: {str(excep)}')


  ''' ENTRY POINT '''

  if __name__ in ('__main__', '__builtin__', 'builtins'):  # pragma: no cover
      main()

  register_module_line('CreateDSPMRiskSlackBlocks', 'end', __line__())
type: python
tags: []
comment: This XSOAR automation script generates a Slack message block to notify users
  of risks detected by a Data Security Posture Management (DSPM) tool. The Slack block
  is dynamically constructed based on the details of the security incident and includes
  options for users to take specific actions, such as creating a Jira ticket or remediating
  the risk.
enabled: true
args:
- name: dspm_incident
outputs:
- contextPath: block_list_name
scripttarget: 0
subtype: python3
timeout: 100800h0m0s
pswd: ""
runonce: false
dockerimage: demisto/python3:3.11.9.104957
runas: DBotWeakRole
engineinfo: {}
mainengineinfo: {}
